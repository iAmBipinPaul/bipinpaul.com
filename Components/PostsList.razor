@using System.Globalization
@using BlazorStatic
@using BlazorStatic.Services
@inject BlazorStaticContentService<BlogFrontMatter> blazorStaticContentService
@inject BlazorStaticService blazorStaticService

<ul class="divide-y divide-gray-700">
    @foreach (var post in posts)
    {
        var firstImageUrl = ExtractFirstImageUrl(post.HtmlContent);
        <li class="py-12">
            <article>
                <div class="space-y-2 xl:grid xl:grid-cols-4 xl:items-baseline xl:space-y-0 xl:gap-8">
                    <div class="space-y-4">
                        <dl>
                            <dt class="sr-only">Published on</dt>
                            <dd class="text-base font-medium leading-6 text-gray-400">
                                <time datetime="@post.FrontMatter.Published.ToString("yyyy-MM-ddTHH:mm:ss.fffK", CultureInfo.InvariantCulture)">
                                    @post.FrontMatter.Published.ToString("MMMM d, yyyy", new CultureInfo("en-US"))
                                </time>
                            </dd>
                        </dl>
                        @if (!string.IsNullOrEmpty(firstImageUrl))
                        {
                            <div>
                                <img src="@firstImageUrl"
                                     alt="@post.FrontMatter.Title"
                                     class="w-full h-32 object-cover rounded-lg shadow-md" />
                            </div>
                        }
                    </div>

                    <div class="space-y-5 xl:col-span-3" style="margin-left:10px">
                        <div class="space-y-6">
                            <div>
                                <h2 class="text-2xl font-bold leading-8 tracking-tight">
                                    <a class="text-gray-100" href="@blazorStaticContentService.Options.PageUrl/@(post.Url)">@post.FrontMatter.Title</a>
                                </h2>
                                <div class="flex flex-wrap mt-3">
                                    @foreach (var tag in post.FrontMatter.Tags)
                                    {
                                        <a class="text-primary-500 hover:text-primary-400 mr-3 text-sm font-medium uppercase" href="@blazorStaticContentService.Options.Tags.TagsPageUrl/@tag">@tag</a>
                                    }
                                </div>
                            </div>
                            <div class="prose max-w-none text-gray-400">
                                @((MarkupString)post.FrontMatter.Lead)
                            </div>
                        </div>
                        <div class="text-base font-medium leading-6">
                            <a class="text-primary-500 hover:text-primary-400" aria-label='Read "@(post.FrontMatter.Title)"' href="@blazorStaticContentService.Options.PageUrl/@(post.Url)">Read more â†’</a>
                        </div>
                    </div>
                </div>
            </article>
        </li>
    }
</ul>

@code {
    List<Post<BlogFrontMatter>> posts = new();

    [Parameter] public List<Post<BlogFrontMatter>>? Posts { get; set; }
    [Parameter] public int? MaxPosts { get; set; }

    protected override void OnInitialized()
    {
        posts = Posts != null ? Posts : blazorStaticContentService.Posts;

        if (posts is not null)
        {
            if (MaxPosts.HasValue && MaxPosts > 0)
            {
                posts = posts.OrderByDescending(c => c.FrontMatter.Published).Take(MaxPosts.Value).ToList();
            }
            else
            {
                posts = posts.OrderByDescending(c => c.FrontMatter.Published).ToList();
            }
        }

        base.OnInitialized();
    }

    private string? ExtractFirstImageUrl(string htmlContent)
    {
        if (string.IsNullOrEmpty(htmlContent))
            return null;

        var match = System.Text.RegularExpressions.Regex.Match(htmlContent, "<img[^>]+src=\"([^\"]+)\"[^>]*>", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        if (match.Success && match.Groups.Count > 1)
        {
            return match.Groups[1].Value;
        }
        return null;
    }
}